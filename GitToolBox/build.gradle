import java.nio.file.Paths
import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id "org.jetbrains.intellij" version "0.4.10"
    id 'com.palantir.git-version' version '0.11.0'
    id 'ch.netzwerg.release' version '1.2.5'
    id "com.github.spotbugs" version "2.0.0"
}

repositories {
    mavenCentral()
}

apply plugin: 'org.jetbrains.intellij'
apply plugin: 'idea'
apply plugin: "java"

def javaVersion = JavaVersion.VERSION_1_8;
def encoding = 'UTF-8'

java {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

def fast = Boolean.valueOf(String.valueOf(findProperty('fast')))
def publish = Boolean.valueOf(String.valueOf(findProperty('publish')))
def runSpotBugs = false

configurations {
    testAgent {
        transitive = false
    }
}

def ideaCacheDir = Paths.get(System.getProperty('user.home')).resolve('intellij-gradle-cache').toAbsolutePath().toString()
println("Idea cache dir: " + ideaCacheDir)
println("Build type: " + buildType())

intellij {
    version = ideaVersion
    type = ideaType
    updateSinceUntilBuild = false
    downloadSources = true
    plugins = ['java', 'git4idea', 'gr.jchrist.gitextender:0.4.1']
    ideaDependencyCachePath = ideaCacheDir
}

compileJava.options.encoding = encoding
compileTestJava.options.encoding = encoding

patchPluginXml {
    changeNotes "${file('change-notes.html').getText(encoding)}"
    pluginDescription "${file('description.html').getText(encoding)}"
            .replace("RELEASE_DATETIME", buildTime())
            .replace("RELEASE_TYPE", buildType());
}

if (publish) {
    apply from: 'publish.gradle'
    publishPlugin {
        token = project.publishToken
        username = project.publishUsername
        password = project.publishPassword
        channels = publishChannels();
    }    
}

jar {
    manifest {
        attributes(
            'Name': project.name,
            'Specification-Title': project.name,
            'Specification-Vendor': 'Lukasz Zielinski (zieluuuu@gmail.com)',
            'Specification-Version': project.version,
            'Implementation-Title': project.name,
            'Implementation-Vendor': 'Lukasz Zielinski (zieluuuu@gmail.com)',
            'Implementation-Version': versionDetails().gitHash,
            'Build-Date': buildTime()
        )
    }
}

release {
    tagPrefix = ''
    dependsOn buildPlugin
}

apply plugin: 'jacoco'
jacoco {
    toolVersion = "${jacocoVersion}"
}

// workaround for missing coverage report with JUnit 5 (https://stackoverflow.com/a/44907857)
// as 'test' task cleans generated report
jacocoTestReport {
    executionData = files("${project.buildDir.name}/jacoco-junit5/test.exec")
}

test {
    jacoco {
        destinationFile = file("${project.buildDir.name}/jacoco-junit5/test.exec")
    }

    useJUnitPlatform {
        //prevent running extensions as Junit 3 tests because of naming convention with TestCase
        exclude('zielu/junit5/**')
        includeTags = fast ? ['fast'] : ['fast', 'integration']
        reports {
            html.enabled = false
        }
    }
}

spotbugs {
    toolVersion = "${spotbugsVersion}"
    ignoreFailures = false
    effort = 'default'
    includeFilter = file("${projectDir}/config/findbugs/includeFilter.xml")
}
spotbugsMain.onlyIf {
    !fast && runSpotBugs
}
spotbugsTest.onlyIf {
    !fast && runSpotBugs
}

apply plugin: 'checkstyle'
checkstyle {
    toolVersion = "${checkstyleVersion}"
    maxErrors = 0
    maxWarnings = 0
    /*configFile = project(':').file('config/checkstyle/lax_checkstyle.xml')*/
    configProperties = [ "suppressionFile" : project(':').file('config/checkstyle/suppressions.xml')]
}

dependencies {
    checkstyle ("com.puppycrawl.tools:checkstyle:${checkstyleVersion}")
    testAgent ("org.jacoco:org.jacoco.agent:${jacocoVersion}:runtime")
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.8.0'

    //keep compile instead of implementation for org.jetbrains.intellij to package plugin correctly
    compile ("org.jodd:jodd-core:${joddVersion}")
    compile ("com.google.guava:guava:${guavaVersion}")
    compile ("org.apache.commons:commons-lang3:${commonsLang3Version}")
    compile ("io.dropwizard.metrics:metrics-core:${metricsVersion}") {
        exclude group: 'org.slf4j', module:'slf4j-api'
    }
    compile ("io.dropwizard.metrics:metrics-jmx:${metricsVersion}") {
        exclude group: 'org.slf4j', module:'slf4j-api'
    }

    compileOnly ('com.google.code.findbugs:jsr305:3.0.2')
    compileOnly ("com.github.spotbugs:spotbugs:${spotbugsVersion}")

    testImplementation ("org.eclipse.jgit:org.eclipse.jgit:${jgitVersion}")
    testImplementation ("org.mockito:mockito-core:${mockitoVersion}")
    testImplementation ("org.mockito:mockito-junit-jupiter:${mockitoVersion}")
    testImplementation ("org.assertj:assertj-core:${assertjCoreVersion}")
    testImplementation ("org.slf4j:slf4j-api:${slf4jVersion}")

    testImplementation ("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testImplementation ("org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}")

    testRuntimeOnly ("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
    //testRuntimeOnly ("org.slf4j:slf4j-simple:${slf4jVersion}")
    testCompileOnly ('org.apiguardian:apiguardian-api:1.0.0')
}


def static buildTime() {
    def df = new SimpleDateFormat("yyyyMMdd.HHmmss")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

def isStableBuild() {
    def details = versionDetails()
    return details.branchName ==~ /(master|\d+-release)/
}

def buildType() {
    return isStableBuild() ? "Stable" : "EAP"
}

def publishChannels() {
    return isStableBuild() ? ['default', 'eap'] : ['eap']
}